# Configuration for the ackermann drive controller
#
curiosity_mars_rover:
    ackermann_drive_controller:
        type: 'ackermann_drive_controller/AckermannDriveController'

        # Odometry related 
        publish_rate: 50
        open_loop: false

        # Wheel joints
        front_left_wheel: 'front_wheel_L_joint'
        front_right_wheel: 'front_wheel_R_joint'
        mid_left_wheel: 'middle_wheel_L_joint'
        mid_right_wheel: 'middle_wheel_R_joint'
        back_left_wheel: 'back_wheel_L_joint'
        back_right_wheel: 'back_wheel_R_joint'

        # Steering joints
        front_left_steer: 'suspension_steer_F_L_joint'
        front_right_steer: 'suspension_steer_F_R_joint'
        back_left_steer: 'suspension_steer_B_L_joint'
        back_right_steer: 'suspension_steer_B_R_joint'

        # Geometry
        wheel_radius: 0.25
        mid_wheel_lat_separation: 2.36
        front_wheel_lat_separation: 2.10
        front_wheel_lon_separation: 1.17
        back_wheel_lat_separation: 2.10
        back_wheel_lon_separation: 1.07

        # @TOOD: re-enable 
        # wheel_radius_multiplier: 1.0        # default: 1.0
        # wheel_separation_multiplier: 1.0    # default 1.0

        # Odometry covariances for the encoder output of the robot. These values should
        # be tuned to your robot's sample odometry data, but these values are a good place
        # to start
        pose_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]
        twist_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]

        # Top level frame (link) of the robot description
        base_frame_id: 'base_link'

        # Transform from odom -> base_link: Enable if NOT using ekf_localization. 
        enable_odom_tf: true # Change back to false if disable Gazebo GPS
        odom_frame_id: '/odom'

        # Disable transform from odom -> base_link: Disable if USING ekf_localization. 
        # 
        # Also disable if we are using the Intel Realsense T265 tracking camera
        # which provides a transform from odom to camera_pose_link.
        # 
        #   enable_odom_tf: false

        # Set to false if the motor driver provides velocity data. 
        estimate_velocity_from_position: true

        # Commands
        publish_cmd: true
        allow_multiple_cmd_vel_publishers: true # allow teleoperation for correction during autonomous navigation

        # Velocity and acceleration limits for the robot
        linear:
            x:
                has_velocity_limits    : false
                max_velocity           : 0.37   # m/s
                has_acceleration_limits: true
                max_acceleration       : 2.0    # m/s^2
        angular:
            z:
                has_velocity_limits    : true
                max_velocity           : 1.45   # rad/s
                has_acceleration_limits: true
                max_acceleration       : 3.0    # rad/s^2

        # Other (undocumented but in source code)
        # velocity_rolling_window_size: 10
        # cmd_vel_timeout: 0.5

        # Deprecated...
        # publish_wheel_joint_controller_state: false